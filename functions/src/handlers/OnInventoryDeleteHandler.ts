import * as admin from "firebase-admin";
import {DocumentSnapshot} from "firebase-functions/lib/providers/firestore";
import {EventContext} from "firebase-functions";
import {FirestoreCollection} from "../enums/FirestoreCollection";
import {IBAutoGeneratedShoppingListId} from "../classses/builders/indetefires/IBAutoGeneratedShoppingListId";
import {IdentifierCreator} from "../classses/creators/IdentifierCreator";
import {deserialize} from "typescript-json-serializer";
import {Photo} from "../classses/model/Photo";
import {FirestoreHelper} from "../classses/helpers/FirestoreHelper";

export function onInventoryDeleteHandler(snapshot: DocumentSnapshot, context: EventContext) {
    return Promise.all([
        deleteRelatedNotifications(snapshot, context),
        deleteRelatedShoppingListItems(snapshot, context),
        deleteRelatedPhotos(snapshot, context)
    ]);
}

/**
 * Удаляет все связанные с инвентарём автосгененрированные покупки
 * @param snapshot
 * @param context
 */
function deleteRelatedShoppingListItems(snapshot: DocumentSnapshot, context: EventContext) {

    if (context.auth === undefined) return undefined;

    const inventoryRef = snapshot.ref;

    const uid = context.auth.uid;

    const autoGeneratedShoppingListIdBuilder = new IBAutoGeneratedShoppingListId(uid);
    const idCreator = new IdentifierCreator(autoGeneratedShoppingListIdBuilder);

    idCreator.construct();

    const autoGeneratedShoppingListId = idCreator.get();
    const autoGeneratedShoppingListRef = admin.firestore().collection(FirestoreCollection.BuyLists).doc(autoGeneratedShoppingListId);

    return admin.firestore()
        .collection(FirestoreCollection.Buys)
        .where("list", "==", autoGeneratedShoppingListRef)
        .where("related_object", "==", inventoryRef)
        .get()
        .then(FirestoreHelper.deleteAllFilesInQuery)
}

/**
 * Удаляет все связанные с инвентарём уведомления
 * @param snapshot
 * @param context
 */
function deleteRelatedNotifications(snapshot: DocumentSnapshot, context: EventContext): Promise<any> {
    const inventoryLink = snapshot.ref;

    return admin.firestore()
        .collection(FirestoreCollection.Notifications)
        .where("related_object", "==", inventoryLink)
        .get()
        .then(FirestoreHelper.deleteAllFilesInQuery)
}

/**
 * Удаляет все фотографии добавленные в инвентарь
 * @param snapshot
 * @param context
 */
function deleteRelatedPhotos(snapshot: DocumentSnapshot, context: EventContext): Promise<any> {
    const photosCollection = snapshot.ref.collection(FirestoreCollection.Photos);
    return photosCollection.get().then(deleteRelatedPhotosHandler)
}

function deleteRelatedPhotosHandler(querySnapshot: FirebaseFirestore.QuerySnapshot) {
    const promises: Promise<any>[] = [];

    const photos = querySnapshot.docs.map(document => {
        return deserialize(document, Photo);
    });

    photos.forEach(photo => {
        if (photo === undefined || photo.path === undefined) return;
        const res = admin.storage().bucket().file(photo.path).delete();
        promises.push(res);
    });

    const removeAllDocumentsPromise = FirestoreHelper.deleteAllFilesInQuery(querySnapshot);

    promises.push(removeAllDocumentsPromise);

    return Promise.all(promises)
}
