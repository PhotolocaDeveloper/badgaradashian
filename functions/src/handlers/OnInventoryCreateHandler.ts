import {DocumentSnapshot} from "firebase-functions/lib/providers/firestore";
import {deserialize, serialize} from "typescript-json-serializer";
import {Inventory} from "../classses/model/Inventory";
import {InventoryEndsNotifBuilder} from "../classses/builders/notifications/InventoryEndsNotifBuilder";
import {NotificationCreator} from "../classses/creators/NotificationCreator";
import {EventContext} from "firebase-functions";
import * as admin from "firebase-admin";
import {FirestoreCollection} from "../enums/FirestoreCollection";
import {SLIBFromInventory} from "../classses/builders/shoppingListItems/SLIBFromInventory";
import {ShoppingListItemCreator} from "../classses/creators/ShoppingListItemCreator";
import {IBAutoGeneratedShoppingListId} from "../classses/builders/indetefires/IBAutoGeneratedShoppingListId";
import {IdentifierCreator} from "../classses/creators/IdentifierCreator";

export function onInventoryCreateHandler(snapshot: DocumentSnapshot, context: EventContext) {
    if (context.auth === undefined) return;

    const promises: Promise<any>[] = [];

    const createOnInventoryEndsNotificationPromise = createOnInventoryEndsNotification(context.auth.uid, snapshot);
    const createShoppingListItemPromise = createShoppingListItem(context.auth.uid, snapshot);

    if (createOnInventoryEndsNotificationPromise !== undefined) {
        promises.push(createOnInventoryEndsNotificationPromise)
    }

    if (createShoppingListItemPromise !== undefined) {
        promises.push(createShoppingListItemPromise)
    }

    return Promise.all(promises)
}

/***
 * Добавляет уведомление о замене инвентаря
 * @param uid
 * @param snapshot
 */
function createOnInventoryEndsNotification(uid: string, snapshot: DocumentSnapshot): Promise<any> | undefined {
    const inventory = deserialize(snapshot.data(), Inventory);

    if (inventory.nextReplacementDate === undefined) {
        return undefined;
    }

    const notificationBuilder = new InventoryEndsNotifBuilder(uid, snapshot.ref, inventory);
    const notificationCreator = new NotificationCreator(notificationBuilder);

    notificationCreator.constructNotification();

    const notification = notificationCreator.getNotification();
    return admin.firestore().collection(FirestoreCollection.Notifications).doc().create(serialize(notification));
}

/**
 * Добавляет покупку если установленна дата замены
 * @param uid
 * @param snapshot
 */
function createShoppingListItem(uid: string, snapshot: DocumentSnapshot): Promise<any> | undefined {
    const inventory = deserialize(snapshot.data(), Inventory);

    if (inventory.nextReplacementDate === undefined) {
        return undefined;
    }

    const userLink = admin.firestore().collection(FirestoreCollection.Users).doc(uid);

    const shoppingListIdbBuilder = new IBAutoGeneratedShoppingListId(uid);
    const identifierCreator = new IdentifierCreator(shoppingListIdbBuilder);

    identifierCreator.construct();

    const shoppingListId = identifierCreator.get();

    const shoppingListLink = admin.firestore().collection(FirestoreCollection.BuyLists).doc(shoppingListId);

    const shoppingListItemBuilder = new SLIBFromInventory(inventory, shoppingListLink, userLink);
    const shoppingListItemCreator = new ShoppingListItemCreator(shoppingListItemBuilder);

    shoppingListItemCreator.construct();

    const shoppingListItem = shoppingListItemCreator.get();

    return admin.firestore().collection(FirestoreCollection.Buys).doc().create(serialize(shoppingListItem))
}
