import {DocumentSnapshot} from "firebase-functions/lib/providers/firestore";
import {IBAutoGeneratedShoppingListId} from "../../classses/builders/indetefires/IBAutoGeneratedShoppingListId";
import {IdentifierCreator} from "../../classses/creators/IdentifierCreator";
import * as admin from "firebase-admin";
import {FirestoreCollection} from "../../enums/FirestoreCollection";
import {serialize} from "typescript-json-serializer";
import {Inventory} from "../../classses/model/Inventory";
import {InventoryEndsNotifBuilder} from "../../classses/builders/notifications/InventoryEndsNotifBuilder";
import {NotificationCreator} from "../../classses/creators/NotificationCreator";
import {SLIBFromInventory} from "../../classses/builders/shoppingListItems/SLIBFromInventory";
import {ShoppingListItemCreator} from "../../classses/creators/ShoppingListItemCreator";
import {Helper} from "../../classses/helpers/Helper";

export class InventoryFunctions {

    /**
     * Удаляет все связанные с инвентарём автосгененрированные покупки
     * @param snapshot
     */
    deleteRelatedShoppingListItems(snapshot: DocumentSnapshot) {
        const inventory = Helper.firestore().deserialize(snapshot, Inventory);

        if (inventory === undefined) return Promise.resolve();

        const inventoryRef = snapshot.ref;

        const uid = inventory.user!.id;

        const autoGeneratedShoppingListIdBuilder = new IBAutoGeneratedShoppingListId(uid);
        const idCreator = new IdentifierCreator(autoGeneratedShoppingListIdBuilder);

        idCreator.construct();

        const autoGeneratedShoppingListId = idCreator.get();
        const autoGeneratedShoppingListRef = admin.firestore().collection(FirestoreCollection.BuyLists).doc(autoGeneratedShoppingListId);

        const query = admin.firestore()
            .collection(FirestoreCollection.Buys)
            .where("list", "==", autoGeneratedShoppingListRef)
            .where("related_object", "==", inventoryRef);
        return Helper.firestore().deleteAllFilesInQuery(query);
    }

    /***
     * Добавляет уведомление о замене инвентаря
     * @param snapshot
     */
    createOnInventoryEndsNotification(snapshot: DocumentSnapshot): Promise<any> {
        const inventory = Helper.firestore().deserialize(snapshot, Inventory);

        if (inventory === undefined) return Promise.resolve();

        const uid = inventory.user!.id;

        if (inventory.nextReplacementDate === undefined) {
            return Promise.resolve();
        }

        const notificationBuilder = new InventoryEndsNotifBuilder(uid, snapshot.ref, inventory);
        const notificationCreator = new NotificationCreator(notificationBuilder);

        const notification = notificationCreator.construct().get();

        return admin.firestore().collection(FirestoreCollection.Notifications).doc().create(serialize(notification));
    }

    /**
     * Добавляет покупку если установленна дата замены
     * @param snapshot
     */
    createShoppingListItem(snapshot: DocumentSnapshot): Promise<any> {
        const inventory = Helper.firestore().deserialize(snapshot, Inventory);
        if (inventory === undefined) return Promise.resolve();

        const uid = inventory.user!.id;

        if (inventory.nextReplacementDate === undefined) {
            return Promise.resolve();
        }

        const userLink = admin.firestore().collection(FirestoreCollection.Users).doc(uid);

        const shoppingListIdbBuilder = new IBAutoGeneratedShoppingListId(uid);
        const identifierCreator = new IdentifierCreator(shoppingListIdbBuilder);

        identifierCreator.construct();

        const shoppingListId = identifierCreator.get();

        const shoppingListLink = admin.firestore().collection(FirestoreCollection.BuyLists).doc(shoppingListId);

        const shoppingListItemBuilder = new SLIBFromInventory(inventory, snapshot.ref, shoppingListLink, userLink);
        const shoppingListItemCreator = new ShoppingListItemCreator(shoppingListItemBuilder);

        shoppingListItemCreator.construct();

        const shoppingListItem = shoppingListItemCreator.get();

        return admin.firestore().collection(FirestoreCollection.Buys).doc().create(serialize(shoppingListItem))
    }

}
