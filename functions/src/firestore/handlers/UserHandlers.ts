import {UserSettingSynchronization} from "../../classses/model/UserSettingSynchronization";
import * as admin from "firebase-admin";
import {FirestoreCollection} from "../../enums/FirestoreCollection";
import {serialize} from "typescript-json-serializer";
import {IBAutoGeneratedShoppingListId} from "../../classses/builders/indetefires/IBAutoGeneratedShoppingListId";
import {IdentifierCreator} from "../../classses/creators/IdentifierCreator";
import {AutogeneratedShoppingListBuilder} from "../../classses/builders/shoppingLists/AutogeneratedShoppingListBuilder";
import {BuyListCreator} from "../../classses/creators/BuyListCreator";
import {UserSettingDefaultValues} from "../../classses/model/UserSettingDefaultValues";
import {Helper} from "../../classses/helpers/Helper";
import {HousingCreator} from "../../classses/creators/HousingCreator";
import {HBDemo} from "../../classses/builders/houising/HBDemo";
import {RBDemo, RBDemo$Types} from "../../classses/builders/rooms/RBDemo";
import {RoomCreator} from "../../classses/creators/RoomCreator";
import {TLBBase} from "../../classses/builders/taskList/TLBBase";
import {TaskListCreator} from "../../classses/creators/TaskListCreator";
import {SLBBase} from "../../classses/builders/shoppingLists/SLBBase";
import {ShoppingListCreator} from "../../classses/creators/ShoppingListCreator";
import UserRecord = admin.auth.UserRecord;

export class UserHandlers {
    /***
     * Создание пользовательских настроек синфронизации с Google Calendar
     * @param userRecord
     */
    createUserSyncSettings(userRecord: UserRecord): Promise<any> {
        const uid = userRecord.uid;
        const userSettingSyncronization = new UserSettingSynchronization(uid);

        return admin.firestore()
            .collection(FirestoreCollection.UserSettings)
            .doc(userSettingSyncronization.id)
            .set(serialize(userSettingSyncronization));
    }

    /**
     * Создаёт список для сохранения автосгенерированных покупок пользователя
     * @param userRecord
     */
    createAutogeneratedBuyList(userRecord: UserRecord): Promise<any> {
        const uid = userRecord.uid;
        const userReference = admin.firestore()
            .collection(FirestoreCollection.Users)
            .doc(uid);

        const ibAutogeneratedShoppingListBuilder = new IBAutoGeneratedShoppingListId(uid);
        const idCreator = new IdentifierCreator(ibAutogeneratedShoppingListBuilder);

        idCreator.construct();

        const buyListBuilder = new AutogeneratedShoppingListBuilder(userReference);
        const buyListCreator = new BuyListCreator(buyListBuilder);

        buyListCreator.create();

        const buyList = buyListCreator.buyList;
        const reference = admin.firestore().collection(FirestoreCollection.BuyLists).doc(idCreator.get());

        const createAutoGeneratedByuListResult = reference.set(serialize(buyList), {merge: true});

        const saveAutogeneratedByuListReferenceResult = UserHandlers.saveAutogeneratedByuListReference(uid, reference);

        return Promise.all([createAutoGeneratedByuListResult, saveAutogeneratedByuListReferenceResult])
    }

    /**
     * Сохраняет ссылку на список для автосгенерированных покупок в настройках пользовтеля
     * @param uid
     * @param buyListReference
     */
    static saveAutogeneratedByuListReference(uid: string, buyListReference: admin.firestore.DocumentReference) {
        const userDefaultValues = new UserSettingDefaultValues(uid);

        userDefaultValues.autoGeneratedBuyList = buyListReference;

        return admin.firestore()
            .collection(FirestoreCollection.UserSettings)
            .doc(userDefaultValues.id)
            .set(serialize(userDefaultValues), {merge: true})
    }

    createDemoObjects(userRecord: UserRecord) {
        const uid = userRecord.uid;
        const batch = admin.firestore().batch();
        const userRef = admin.firestore().collection(FirestoreCollection.Users).doc(uid);
        const housingRef = admin.firestore().collection(FirestoreCollection.Housings).doc();
        const taskListBuilder = new TLBBase(userRef);
        const shoppingListBuilder = new SLBBase(userRef);
        const demoHousingBuilder = new HBDemo(userRef);
        const demoRoomBuilders = [
            new RBDemo(RBDemo$Types.BATH_ROOM, userRef, housingRef),
            new RBDemo(RBDemo$Types.BEDROOM, userRef, housingRef),
            new RBDemo(RBDemo$Types.LIVING_ROOM, userRef, housingRef),
            new RBDemo(RBDemo$Types.KITCHEN, userRef, housingRef)
        ];
        new TaskListCreator(taskListBuilder).create().createBatch(batch);
        new ShoppingListCreator(shoppingListBuilder).create().createBatch(batch);
        new HousingCreator(demoHousingBuilder).create().getSaveBatch(batch, housingRef);
        demoRoomBuilders.forEach(builder => {
            new RoomCreator(builder).create().getSaveBatch(batch)
        });
        return batch.commit();
    }

    onDelete(userRecord: UserRecord): Promise<any> {
        const userId = userRecord.uid;
        const query = admin.firestore()
            .collection(FirestoreCollection.UserSettings)
            .where("user_id", "==", userId);
        return Helper.firestore().deleteAllFilesInQuery(query);
    }
}
