import {DocumentSnapshot} from "firebase-functions/lib/providers/firestore";
import {EventContext} from "firebase-functions";
import {IBAutoGeneratedShoppingListId} from "../classses/builders/indetefires/IBAutoGeneratedShoppingListId";
import {IdentifierCreator} from "../classses/creators/IdentifierCreator";
import * as admin from "firebase-admin";
import {FirestoreCollection} from "../enums/FirestoreCollection";
import {FirestoreHelper} from "../classses/helpers/FirestoreHelper";
import {deserialize, serialize} from "typescript-json-serializer";
import {Inventory} from "../classses/model/Inventory";
import {InventoryEndsNotifBuilder} from "../classses/builders/notifications/InventoryEndsNotifBuilder";
import {NotificationCreator} from "../classses/creators/NotificationCreator";
import {SLIBFromInventory} from "../classses/builders/shoppingListItems/SLIBFromInventory";
import {ShoppingListItemCreator} from "../classses/creators/ShoppingListItemCreator";

export namespace InventoryFunctions {
    /**
     * Удаляет все связанные с инвентарём автосгененрированные покупки
     * @param snapshot
     * @param context
     */
    export function deleteRelatedShoppingListItems(snapshot: DocumentSnapshot, context: EventContext) {

        if (context.auth === undefined) return undefined;

        const inventoryRef = snapshot.ref;

        const uid = context.auth.uid;

        const autoGeneratedShoppingListIdBuilder = new IBAutoGeneratedShoppingListId(uid);
        const idCreator = new IdentifierCreator(autoGeneratedShoppingListIdBuilder);

        idCreator.construct();

        const autoGeneratedShoppingListId = idCreator.get();
        const autoGeneratedShoppingListRef = admin.firestore().collection(FirestoreCollection.BuyLists).doc(autoGeneratedShoppingListId);

        return admin.firestore()
            .collection(FirestoreCollection.Buys)
            .where("list", "==", autoGeneratedShoppingListRef)
            .where("related_object", "==", inventoryRef)
            .get()
            .then(FirestoreHelper.deleteAllFilesInQuery)
    }

    /***
     * Добавляет уведомление о замене инвентаря
     * @param snapshot
     * @param context
     */
    export function createOnInventoryEndsNotification(snapshot: DocumentSnapshot, context: EventContext): Promise<any> | undefined {
        if (context.auth === undefined) return undefined;

        const inventory = deserialize(snapshot.data(), Inventory);
        const uid = context.auth.uid;

        if (inventory.nextReplacementDate === undefined) {
            return undefined;
        }

        const notificationBuilder = new InventoryEndsNotifBuilder(uid, snapshot.ref, inventory);
        const notificationCreator = new NotificationCreator(notificationBuilder);

        const notification = notificationCreator.construct().get();

        return admin.firestore().collection(FirestoreCollection.Notifications).doc().create(serialize(notification));
    }

    /**
     * Добавляет покупку если установленна дата замены
     * @param snapshot
     * @param context
     */
    export function createShoppingListItem(snapshot: DocumentSnapshot, context: EventContext): Promise<any> | undefined {
        if (context.auth === undefined) return undefined;

        const inventory = deserialize(snapshot.data(), Inventory);
        const uid = context.auth.uid;

        if (inventory.nextReplacementDate === undefined) {
            return undefined;
        }

        const userLink = admin.firestore().collection(FirestoreCollection.Users).doc(uid);

        const shoppingListIdbBuilder = new IBAutoGeneratedShoppingListId(uid);
        const identifierCreator = new IdentifierCreator(shoppingListIdbBuilder);

        identifierCreator.construct();

        const shoppingListId = identifierCreator.get();

        const shoppingListLink = admin.firestore().collection(FirestoreCollection.BuyLists).doc(shoppingListId);

        const shoppingListItemBuilder = new SLIBFromInventory(inventory, snapshot.ref, shoppingListLink, userLink);
        const shoppingListItemCreator = new ShoppingListItemCreator(shoppingListItemBuilder);

        shoppingListItemCreator.construct();

        const shoppingListItem = shoppingListItemCreator.get();

        return admin.firestore().collection(FirestoreCollection.Buys).doc().create(serialize(shoppingListItem))
    }

}
